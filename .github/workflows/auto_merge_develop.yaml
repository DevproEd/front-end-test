# release分支合併進develop分支後,將最新版develop分支合併進release分支
# v1.0 create by Ed.Lin Date:2024/11/1
# v1.1 update by Ed.Lin Date:2024/11/15 - 新增檢核是否為release分支

name: Auto Merge Develop to Future Release Branches

permissions:
    issues: write # 给 `issues` 相關操作寫入權限
    pull-requests: write # 给 `pull-requests` 相關操作寫入權限
    contents: write # 给内容相關操作寫入權限

# 工作流程會在 PR 被合併到 develop 分支後觸發
on:
    pull_request:
        types:
            - closed # 只在 PR 被關閉（合併）的情況下觸發
        branches:
            - develop # 僅當 PR 是合併到 develop 分支時觸發

jobs:
    merge:
        # 只有當 PR 已被合併時（而不是單純關閉）才會執行
        if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
        runs-on: ubuntu-latest

        steps:
            # 檢出當前的代碼，這是必要步驟，否則無法操作 Git
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            # 設置 Git 使用者配置，GitHub Actions 需要以一個虛擬使用者進行 Git 操作
            - name: Set up Git
              run: |
                  git config --global user.name "GitHub Actions"
                  git config --global user.email "actions@github.com"

            # 配置遠端URL使用 GITHUB_TOKEN，確保在推送代碼時授權
            - name: Set up authentication
              run: |
                  git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

            # 從合併的 PR 分支名稱中提取 base_date，即 release/yyyymmdd 的日期部分
            - name: Get base_date from merged branch
              run: |
                  # 取得 PR 的來源分支名稱，例如 release/20241021
                  SOURCE_BRANCH=$(echo "${{ github.event.pull_request.head.ref }}")

                  # 確認來源分支是否符合 release/yyyymmdd 格式
                  if [[ "$SOURCE_BRANCH" =~ release/[0-9]{8} ]]; then
                    # 提取 yyyymmdd 作為 base_date
                    BASE_DATE=$(echo "$SOURCE_BRANCH" | sed 's/release\///')
                    echo "Base date: $BASE_DATE"
                  else
                    echo "Not a valid release branch. Exiting."
                    exit 0   # 若來源分支不符合格式，退出流程
                  fi

            # 嘗試將 develop 分支合併到所有日期比 base_date 晚的 release 分支中
            - name: Merge develop into future release branches
              run: |
                  # 確保拉取所有遠端分支
                  git fetch --all

                  # 獲取所有 release/ 開頭的遠端分支名稱
                  RELEASE_BRANCHES=$(git branch -r | grep 'origin/release/' | sed 's/origin\///')

                  # 打印出 RELEASE_BRANCHES 的內容，用於調試
                  echo "Found release branches:"
                  echo "$RELEASE_BRANCHES"

                  # 定義一個函數來驗證日期
                      is_valid_date() {
                      local DATE=$1
                      local YEAR=${DATE:0:4}
                      local MONTH=${DATE:4:2}
                      local DAY=${DATE:6:2}

                  # 檢查年份、月份、日期是否是有效的數字範圍
                    if ! [[ "$YEAR" =~ ^[0-9]{4}$ ]] || ! [[ "$MONTH" =~ ^(0[1-9]|1[0-2])$ ]] || ! [[ "$DAY" =~ ^(0[1-9]|[12][0-9]|3[01])$ ]]; then
                    return 1
                    fi

                    # 檢查月份和天數的合理性
                    if [[ "$MONTH" == "04" || "$MONTH" == "06" || "$MONTH" == "09" || "$MONTH" == "11" ]]; then
                        # 4月、6月、9月、11月最多30天
                        if [[ "$DAY" -gt 30 ]]; then return 1; fi
                    elif [[ "$MONTH" == "02" ]]; then
                        # 檢查閏年和2月天數
                        if (( (YEAR % 4 == 0 && YEAR % 100 != 0) || YEAR % 400 == 0 )); then
                        # 閏年2月有29天
                        if [[ "$DAY" -gt 29 ]]; then return 1; fi
                        else
                        # 非閏年2月有28天
                        if [[ "$DAY" -gt 28 ]]; then return 1; fi
                        fi
                    fi

                    return 0  # 合法日期
                    }

                  # 遍歷所有 release 分支，並將 develop 合併到日期較晚的分支
                  for BRANCH in $RELEASE_BRANCHES; do
                    # 提取 release 分支的日期部分
                    RELEASE_DATE=$(echo $BRANCH | sed 's/release\///')

                    BASE_DATE_TIMESTAMP=$(date -d "$BASE_DATE" +%s)

                    # 先驗證日期是否合法
                    if ! is_valid_date "$RELEASE_DATE"; then
                      echo "Invalid date format in branch: $BRANCH. Skipping this branch."
                      continue  # 跳過無效日期的分支
                    fi

                    RELEASE_DATE_TIMESTAMP=$(date -d "$RELEASE_DATE" +%s)

                    # 只對比 base_date 晚的分支進行合併
                    if [[ "$RELEASE_DATE_TIMESTAMP" -gt "$BASE_DATE_TIMESTAMP" ]]; then
                      echo "Merging develop into $BRANCH"

                      # 切換到該 release 分支
                      git checkout $BRANCH

                      # 拉取最新變更，確保代碼是最新的
                      git pull origin $BRANCH || { echo "Failed to pull from $BRANCH"; exit 1; }

                      # 嘗試將 develop 分支合併進去，如果發生衝突，退出並標記為失敗
                      if ! git merge develop; then
                        echo "Merge conflict occurred in $BRANCH. Please resolve manually."
                        exit 1
                      fi

                      # 如果合併成功，推送變更到遠端
                      git push origin $BRANCH || { echo "Failed to push to $BRANCH"; exit 1; }

                    else
                      # 如果日期較早，則打印分支名稱
                      echo "Branch $BRANCH has a release date earlier than base date $BASE_DATE. Skipping this branch."
                    fi
                  done

            - name: Set branch environment variable
              run: echo "BRANCH=${{ github.ref }}" >> $GITHUB_ENV

            # 如果合併過程中發生錯誤或衝突，這一步將被執行
            # 通過 GitHub API 在原始 PR 中發表評論，通知發 PR 的人
            - name: Notify PR author of merge conflict
              if: failure() # 這一步只有在前面的步驟失敗時才會執行
              uses: actions/github-script@v6
              with:
                  script: |
                      // 獲取 PR 的作者，即發 PR 的 GitHub 使用者名稱
                      const prAuthor = context.payload.pull_request.user.login;

                      // 取得當前的分支名稱
                      const branchName = process.env.BRANCH;

                      // 創建一個評論，通知 PR 作者合併衝突
                      await github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: `@${prAuthor},執行自動merge時發生錯誤，錯誤情況：Merging develop into ${branchName}。請人工介入查看。`

                        });
