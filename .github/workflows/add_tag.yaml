# release分支合併進develop分支後自動加tag
# v1.0 create by Ed.Lin Date:2024/11/14
# v1.1 update by Ed.Lin Date:2024/11/15 - 新增檢核是否為release分支

name: Auto add Tag to Develop Branches

permissions:
    issues: write # 给 `issues` 相關操作寫入權限
    pull-requests: write # 给 `pull-requests` 相關操作寫入權限
    contents: write # 給內容相關操作寫入權限

# 工作流程會在 PR 被合併到 develop 分支後觸發
on:
    pull_request:
        types:
            - closed # 只在 PR 被關閉（合併）的情況下觸發
        branches:
            - develop # 僅當 PR 是合併到 develop 分支時觸發

jobs:
    merge:
        # 只有當 PR 已被合併時（而不是單純關閉）才會執行
        if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
        runs-on: ubuntu-latest

        steps:
            # 檢出當前的代碼，這是必要步驟，否則無法操作 Git
            - name: Checkout code
              uses: actions/checkout@v4

            # 設置 Git 使用者配置，GitHub Actions 需要以一個虛擬使用者進行 Git 操作
            - name: Set up Git
              run: |
                  git config --global user.name "GitHub Actions"
                  git config --global user.email "actions@github.com"

            # 配置遠端URL使用 GITHUB_TOKEN，確保在推送代碼時授權
            - name: Set up authentication
              run: |
                  git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

            # 從分支名稱中提取發布日期
            - name: Extract release date from branch name
              id: extract_date
              run: |
                  # 提取觸發 PR 的分支名稱
                  BRANCH_NAME="${{ github.event.pull_request.head.ref }}"

                  # 使用正則表達式匹配並捕獲日期部分（YYYYMMDD）
                  if [[ "$BRANCH_NAME" =~ release/([0-9]{8}) ]]; then
                      echo "RELEASE_DATE=${BASH_REMATCH[1]}" >> $GITHUB_ENV
                  else
                      echo "Release date not found in branch name"
                      exit 1 # 日期格式錯誤時停止後續執行
                  fi

            # 創建標籤
            - name: Create tag
              env:
                  RELEASE_DATE: ${{ env.RELEASE_DATE }}
              run: |
                  TAG_NAME="PROD_${{ env.RELEASE_DATE }}"
                  # 檢查 tag 是否已存在
                  if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
                  echo "Tag already exists"
                  exit 1
                  fi
                  git tag "$TAG_NAME"
                  git push origin "$TAG_NAME"

            - name: Set branch environment variable
              run: echo "BRANCH=${{ github.ref }}" >> $GITHUB_ENV

            # 如果加tag發生錯誤，這一步將被執行
            # 通過 GitHub API 在原始 PR 中發表評論，通知發 PR 的人
            - name: Notify PR author of error
              if: failure() # 這一步只有在前面的步驟失敗時才會執行
              uses: actions/github-script@v6
              with:
                  script: |
                      // 獲取 PR 的作者，即發 PR 的 GitHub 使用者名稱
                      const prAuthor = context.payload.pull_request.user.login;

                      // 取得當前的分支名稱
                      const branchName = process.env.BRANCH;

                      // 創建一個評論，通知 PR 作者發生錯誤
                      await github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: `@${prAuthor},在自動加tag過程中發生錯誤，release分支名稱未能正確解析發布日期（例如：release/yyyymmdd）。請檢查分支名稱格式並重試。`
                      });
