#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).


# Check branch name
# version 1.0 edited by Ed.lin 2024/11/5
# version 1.1 edited by Ed.lin 2024/12/26 -add release/YYYYMMDD check, YYYYMMDD cannot be less than today.
branch_name=$(git rev-parse --abbrev-ref HEAD)

if [[ "$branch_name" == "develop" ]] ||
   [[ "$branch_name" =~ ^feature/[^/]+$ ]] ||
   [[ "$branch_name" =~ ^fix/[^/]+$ ]] ||
   [[ "$branch_name" =~ ^release/[0-9]{8}$ ]]; then
  if [[ "$branch_name" =~ ^release/([0-9]{8})$ ]]; then
    release_date=${BASH_REMATCH[1]}
    current_date=$(date +%Y%m%d)
    if [[ "$release_date" -lt "$current_date" ]]; then
      echo "Invalid release date. The date in 'release/YYYYMMDD' cannot be less than today's date."
      exit 1
    fi
  fi
  echo "Branch name is valid"
  exit 0
else
  echo "Invalid branch name. Please use one of the following formats: 'develop', 'feature/*', 'fix/*', or 'release/YYYYMMDD'."
  exit 1
fi
